// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:evapp/screen/home/weather_model_entity.dart';

JsonConvert jsonConvert = JsonConvert();
typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);

class JsonConvert {
	static final Map<String, JsonConvertFunction> convertFuncMap = {
		(WeatherModelEntity).toString(): WeatherModelEntity.fromJson,
		(WeatherModelResult).toString(): WeatherModelResult.fromJson,
		(WeatherModelResultAlert).toString(): WeatherModelResultAlert.fromJson,
		(WeatherModelResultAlertContent).toString(): WeatherModelResultAlertContent.fromJson,
		(WeatherModelResultRealtime).toString(): WeatherModelResultRealtime.fromJson,
		(WeatherModelResultRealtimeWind).toString(): WeatherModelResultRealtimeWind.fromJson,
		(WeatherModelResultRealtimePrecipitation).toString(): WeatherModelResultRealtimePrecipitation.fromJson,
		(WeatherModelResultRealtimePrecipitationLocal).toString(): WeatherModelResultRealtimePrecipitationLocal.fromJson,
		(WeatherModelResultRealtimePrecipitationNearest).toString(): WeatherModelResultRealtimePrecipitationNearest.fromJson,
		(WeatherModelResultRealtimeAirQuality).toString(): WeatherModelResultRealtimeAirQuality.fromJson,
		(WeatherModelResultRealtimeAirQualityAqi).toString(): WeatherModelResultRealtimeAirQualityAqi.fromJson,
		(WeatherModelResultRealtimeAirQualityDescription).toString(): WeatherModelResultRealtimeAirQualityDescription.fromJson,
		(WeatherModelResultRealtimeLifeIndex).toString(): WeatherModelResultRealtimeLifeIndex.fromJson,
		(WeatherModelResultRealtimeLifeIndexUltraviolet).toString(): WeatherModelResultRealtimeLifeIndexUltraviolet.fromJson,
		(WeatherModelResultRealtimeLifeIndexComfort).toString(): WeatherModelResultRealtimeLifeIndexComfort.fromJson,
		(WeatherModelResultMinutely).toString(): WeatherModelResultMinutely.fromJson,
		(WeatherModelResultHourly).toString(): WeatherModelResultHourly.fromJson,
		(WeatherModelResultHourlyPrecipitation).toString(): WeatherModelResultHourlyPrecipitation.fromJson,
		(WeatherModelResultHourlyTemperature).toString(): WeatherModelResultHourlyTemperature.fromJson,
		(WeatherModelResultHourlyWind).toString(): WeatherModelResultHourlyWind.fromJson,
		(WeatherModelResultHourlyHumidity).toString(): WeatherModelResultHourlyHumidity.fromJson,
		(WeatherModelResultHourlyCloudrate).toString(): WeatherModelResultHourlyCloudrate.fromJson,
		(WeatherModelResultHourlySkycon).toString(): WeatherModelResultHourlySkycon.fromJson,
		(WeatherModelResultHourlyPressure).toString(): WeatherModelResultHourlyPressure.fromJson,
		(WeatherModelResultHourlyVisibility).toString(): WeatherModelResultHourlyVisibility.fromJson,
		(WeatherModelResultHourlyDswrf).toString(): WeatherModelResultHourlyDswrf.fromJson,
		(WeatherModelResultHourlyAirQuality).toString(): WeatherModelResultHourlyAirQuality.fromJson,
		(WeatherModelResultHourlyAirQualityAqi).toString(): WeatherModelResultHourlyAirQualityAqi.fromJson,
		(WeatherModelResultHourlyAirQualityAqiValue).toString(): WeatherModelResultHourlyAirQualityAqiValue.fromJson,
		(WeatherModelResultHourlyAirQualityPm25).toString(): WeatherModelResultHourlyAirQualityPm25.fromJson,
		(WeatherModelResultDaily).toString(): WeatherModelResultDaily.fromJson,
		(WeatherModelResultDailyAstro).toString(): WeatherModelResultDailyAstro.fromJson,
		(WeatherModelResultDailyAstroSunrise).toString(): WeatherModelResultDailyAstroSunrise.fromJson,
		(WeatherModelResultDailyAstroSunset).toString(): WeatherModelResultDailyAstroSunset.fromJson,
		(WeatherModelResultDailyPrecipitation).toString(): WeatherModelResultDailyPrecipitation.fromJson,
		(WeatherModelResultDailyTemperature).toString(): WeatherModelResultDailyTemperature.fromJson,
		(WeatherModelResultDailyWind).toString(): WeatherModelResultDailyWind.fromJson,
		(WeatherModelResultDailyWindMax).toString(): WeatherModelResultDailyWindMax.fromJson,
		(WeatherModelResultDailyWindMin).toString(): WeatherModelResultDailyWindMin.fromJson,
		(WeatherModelResultDailyWindAvg).toString(): WeatherModelResultDailyWindAvg.fromJson,
		(WeatherModelResultDailyHumidity).toString(): WeatherModelResultDailyHumidity.fromJson,
		(WeatherModelResultDailyCloudrate).toString(): WeatherModelResultDailyCloudrate.fromJson,
		(WeatherModelResultDailyPressure).toString(): WeatherModelResultDailyPressure.fromJson,
		(WeatherModelResultDailyVisibility).toString(): WeatherModelResultDailyVisibility.fromJson,
		(WeatherModelResultDailyDswrf).toString(): WeatherModelResultDailyDswrf.fromJson,
		(WeatherModelResultDailyAirQuality).toString(): WeatherModelResultDailyAirQuality.fromJson,
		(WeatherModelResultDailyAirQualityAqi).toString(): WeatherModelResultDailyAirQualityAqi.fromJson,
		(WeatherModelResultDailyAirQualityAqiMax).toString(): WeatherModelResultDailyAirQualityAqiMax.fromJson,
		(WeatherModelResultDailyAirQualityAqiAvg).toString(): WeatherModelResultDailyAirQualityAqiAvg.fromJson,
		(WeatherModelResultDailyAirQualityAqiMin).toString(): WeatherModelResultDailyAirQualityAqiMin.fromJson,
		(WeatherModelResultDailyAirQualityPm25).toString(): WeatherModelResultDailyAirQualityPm25.fromJson,
		(WeatherModelResultDailySkycon).toString(): WeatherModelResultDailySkycon.fromJson,
		(WeatherModelResultDailySkycon08h20h).toString(): WeatherModelResultDailySkycon08h20h.fromJson,
		(WeatherModelResultDailySkycon20h32h).toString(): WeatherModelResultDailySkycon20h32h.fromJson,
		(WeatherModelResultDailyLifeIndex).toString(): WeatherModelResultDailyLifeIndex.fromJson,
		(WeatherModelResultDailyLifeIndexUltraviolet).toString(): WeatherModelResultDailyLifeIndexUltraviolet.fromJson,
		(WeatherModelResultDailyLifeIndexCarWashing).toString(): WeatherModelResultDailyLifeIndexCarWashing.fromJson,
		(WeatherModelResultDailyLifeIndexDressing).toString(): WeatherModelResultDailyLifeIndexDressing.fromJson,
		(WeatherModelResultDailyLifeIndexComfort).toString(): WeatherModelResultDailyLifeIndexComfort.fromJson,
		(WeatherModelResultDailyLifeIndexColdRisk).toString(): WeatherModelResultDailyLifeIndexColdRisk.fromJson,
	};

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e,enumConvert: enumConvert)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

List<T>? convertListNotNull<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => _asT<T>(e,enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        return convertFuncMap[type]!(Map<String, dynamic>.from(value)) as T;
      } else {
        throw UnimplementedError('$type unimplemented');
      }
    }
  }

	//list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<WeatherModelEntity>[] is M){
			return data.map<WeatherModelEntity>((Map<String, dynamic> e) => WeatherModelEntity.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResult>[] is M){
			return data.map<WeatherModelResult>((Map<String, dynamic> e) => WeatherModelResult.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultAlert>[] is M){
			return data.map<WeatherModelResultAlert>((Map<String, dynamic> e) => WeatherModelResultAlert.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultAlertContent>[] is M){
			return data.map<WeatherModelResultAlertContent>((Map<String, dynamic> e) => WeatherModelResultAlertContent.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultRealtime>[] is M){
			return data.map<WeatherModelResultRealtime>((Map<String, dynamic> e) => WeatherModelResultRealtime.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultRealtimeWind>[] is M){
			return data.map<WeatherModelResultRealtimeWind>((Map<String, dynamic> e) => WeatherModelResultRealtimeWind.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultRealtimePrecipitation>[] is M){
			return data.map<WeatherModelResultRealtimePrecipitation>((Map<String, dynamic> e) => WeatherModelResultRealtimePrecipitation.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultRealtimePrecipitationLocal>[] is M){
			return data.map<WeatherModelResultRealtimePrecipitationLocal>((Map<String, dynamic> e) => WeatherModelResultRealtimePrecipitationLocal.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultRealtimePrecipitationNearest>[] is M){
			return data.map<WeatherModelResultRealtimePrecipitationNearest>((Map<String, dynamic> e) => WeatherModelResultRealtimePrecipitationNearest.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultRealtimeAirQuality>[] is M){
			return data.map<WeatherModelResultRealtimeAirQuality>((Map<String, dynamic> e) => WeatherModelResultRealtimeAirQuality.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultRealtimeAirQualityAqi>[] is M){
			return data.map<WeatherModelResultRealtimeAirQualityAqi>((Map<String, dynamic> e) => WeatherModelResultRealtimeAirQualityAqi.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultRealtimeAirQualityDescription>[] is M){
			return data.map<WeatherModelResultRealtimeAirQualityDescription>((Map<String, dynamic> e) => WeatherModelResultRealtimeAirQualityDescription.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultRealtimeLifeIndex>[] is M){
			return data.map<WeatherModelResultRealtimeLifeIndex>((Map<String, dynamic> e) => WeatherModelResultRealtimeLifeIndex.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultRealtimeLifeIndexUltraviolet>[] is M){
			return data.map<WeatherModelResultRealtimeLifeIndexUltraviolet>((Map<String, dynamic> e) => WeatherModelResultRealtimeLifeIndexUltraviolet.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultRealtimeLifeIndexComfort>[] is M){
			return data.map<WeatherModelResultRealtimeLifeIndexComfort>((Map<String, dynamic> e) => WeatherModelResultRealtimeLifeIndexComfort.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultMinutely>[] is M){
			return data.map<WeatherModelResultMinutely>((Map<String, dynamic> e) => WeatherModelResultMinutely.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultHourly>[] is M){
			return data.map<WeatherModelResultHourly>((Map<String, dynamic> e) => WeatherModelResultHourly.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultHourlyPrecipitation>[] is M){
			return data.map<WeatherModelResultHourlyPrecipitation>((Map<String, dynamic> e) => WeatherModelResultHourlyPrecipitation.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultHourlyTemperature>[] is M){
			return data.map<WeatherModelResultHourlyTemperature>((Map<String, dynamic> e) => WeatherModelResultHourlyTemperature.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultHourlyWind>[] is M){
			return data.map<WeatherModelResultHourlyWind>((Map<String, dynamic> e) => WeatherModelResultHourlyWind.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultHourlyHumidity>[] is M){
			return data.map<WeatherModelResultHourlyHumidity>((Map<String, dynamic> e) => WeatherModelResultHourlyHumidity.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultHourlyCloudrate>[] is M){
			return data.map<WeatherModelResultHourlyCloudrate>((Map<String, dynamic> e) => WeatherModelResultHourlyCloudrate.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultHourlySkycon>[] is M){
			return data.map<WeatherModelResultHourlySkycon>((Map<String, dynamic> e) => WeatherModelResultHourlySkycon.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultHourlyPressure>[] is M){
			return data.map<WeatherModelResultHourlyPressure>((Map<String, dynamic> e) => WeatherModelResultHourlyPressure.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultHourlyVisibility>[] is M){
			return data.map<WeatherModelResultHourlyVisibility>((Map<String, dynamic> e) => WeatherModelResultHourlyVisibility.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultHourlyDswrf>[] is M){
			return data.map<WeatherModelResultHourlyDswrf>((Map<String, dynamic> e) => WeatherModelResultHourlyDswrf.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultHourlyAirQuality>[] is M){
			return data.map<WeatherModelResultHourlyAirQuality>((Map<String, dynamic> e) => WeatherModelResultHourlyAirQuality.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultHourlyAirQualityAqi>[] is M){
			return data.map<WeatherModelResultHourlyAirQualityAqi>((Map<String, dynamic> e) => WeatherModelResultHourlyAirQualityAqi.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultHourlyAirQualityAqiValue>[] is M){
			return data.map<WeatherModelResultHourlyAirQualityAqiValue>((Map<String, dynamic> e) => WeatherModelResultHourlyAirQualityAqiValue.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultHourlyAirQualityPm25>[] is M){
			return data.map<WeatherModelResultHourlyAirQualityPm25>((Map<String, dynamic> e) => WeatherModelResultHourlyAirQualityPm25.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDaily>[] is M){
			return data.map<WeatherModelResultDaily>((Map<String, dynamic> e) => WeatherModelResultDaily.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailyAstro>[] is M){
			return data.map<WeatherModelResultDailyAstro>((Map<String, dynamic> e) => WeatherModelResultDailyAstro.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailyAstroSunrise>[] is M){
			return data.map<WeatherModelResultDailyAstroSunrise>((Map<String, dynamic> e) => WeatherModelResultDailyAstroSunrise.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailyAstroSunset>[] is M){
			return data.map<WeatherModelResultDailyAstroSunset>((Map<String, dynamic> e) => WeatherModelResultDailyAstroSunset.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailyPrecipitation>[] is M){
			return data.map<WeatherModelResultDailyPrecipitation>((Map<String, dynamic> e) => WeatherModelResultDailyPrecipitation.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailyTemperature>[] is M){
			return data.map<WeatherModelResultDailyTemperature>((Map<String, dynamic> e) => WeatherModelResultDailyTemperature.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailyWind>[] is M){
			return data.map<WeatherModelResultDailyWind>((Map<String, dynamic> e) => WeatherModelResultDailyWind.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailyWindMax>[] is M){
			return data.map<WeatherModelResultDailyWindMax>((Map<String, dynamic> e) => WeatherModelResultDailyWindMax.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailyWindMin>[] is M){
			return data.map<WeatherModelResultDailyWindMin>((Map<String, dynamic> e) => WeatherModelResultDailyWindMin.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailyWindAvg>[] is M){
			return data.map<WeatherModelResultDailyWindAvg>((Map<String, dynamic> e) => WeatherModelResultDailyWindAvg.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailyHumidity>[] is M){
			return data.map<WeatherModelResultDailyHumidity>((Map<String, dynamic> e) => WeatherModelResultDailyHumidity.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailyCloudrate>[] is M){
			return data.map<WeatherModelResultDailyCloudrate>((Map<String, dynamic> e) => WeatherModelResultDailyCloudrate.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailyPressure>[] is M){
			return data.map<WeatherModelResultDailyPressure>((Map<String, dynamic> e) => WeatherModelResultDailyPressure.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailyVisibility>[] is M){
			return data.map<WeatherModelResultDailyVisibility>((Map<String, dynamic> e) => WeatherModelResultDailyVisibility.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailyDswrf>[] is M){
			return data.map<WeatherModelResultDailyDswrf>((Map<String, dynamic> e) => WeatherModelResultDailyDswrf.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailyAirQuality>[] is M){
			return data.map<WeatherModelResultDailyAirQuality>((Map<String, dynamic> e) => WeatherModelResultDailyAirQuality.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailyAirQualityAqi>[] is M){
			return data.map<WeatherModelResultDailyAirQualityAqi>((Map<String, dynamic> e) => WeatherModelResultDailyAirQualityAqi.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailyAirQualityAqiMax>[] is M){
			return data.map<WeatherModelResultDailyAirQualityAqiMax>((Map<String, dynamic> e) => WeatherModelResultDailyAirQualityAqiMax.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailyAirQualityAqiAvg>[] is M){
			return data.map<WeatherModelResultDailyAirQualityAqiAvg>((Map<String, dynamic> e) => WeatherModelResultDailyAirQualityAqiAvg.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailyAirQualityAqiMin>[] is M){
			return data.map<WeatherModelResultDailyAirQualityAqiMin>((Map<String, dynamic> e) => WeatherModelResultDailyAirQualityAqiMin.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailyAirQualityPm25>[] is M){
			return data.map<WeatherModelResultDailyAirQualityPm25>((Map<String, dynamic> e) => WeatherModelResultDailyAirQualityPm25.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailySkycon>[] is M){
			return data.map<WeatherModelResultDailySkycon>((Map<String, dynamic> e) => WeatherModelResultDailySkycon.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailySkycon08h20h>[] is M){
			return data.map<WeatherModelResultDailySkycon08h20h>((Map<String, dynamic> e) => WeatherModelResultDailySkycon08h20h.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailySkycon20h32h>[] is M){
			return data.map<WeatherModelResultDailySkycon20h32h>((Map<String, dynamic> e) => WeatherModelResultDailySkycon20h32h.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailyLifeIndex>[] is M){
			return data.map<WeatherModelResultDailyLifeIndex>((Map<String, dynamic> e) => WeatherModelResultDailyLifeIndex.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailyLifeIndexUltraviolet>[] is M){
			return data.map<WeatherModelResultDailyLifeIndexUltraviolet>((Map<String, dynamic> e) => WeatherModelResultDailyLifeIndexUltraviolet.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailyLifeIndexCarWashing>[] is M){
			return data.map<WeatherModelResultDailyLifeIndexCarWashing>((Map<String, dynamic> e) => WeatherModelResultDailyLifeIndexCarWashing.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailyLifeIndexDressing>[] is M){
			return data.map<WeatherModelResultDailyLifeIndexDressing>((Map<String, dynamic> e) => WeatherModelResultDailyLifeIndexDressing.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailyLifeIndexComfort>[] is M){
			return data.map<WeatherModelResultDailyLifeIndexComfort>((Map<String, dynamic> e) => WeatherModelResultDailyLifeIndexComfort.fromJson(e)).toList() as M;
		}
		if(<WeatherModelResultDailyLifeIndexColdRisk>[] is M){
			return data.map<WeatherModelResultDailyLifeIndexColdRisk>((Map<String, dynamic> e) => WeatherModelResultDailyLifeIndexColdRisk.fromJson(e)).toList() as M;
		}

		debugPrint("${M.toString()} not found");
	
		return null;
}

	static M? fromJsonAsT<M>(dynamic json) {
		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return jsonConvert.convert<M>(json);
		}
	}
}